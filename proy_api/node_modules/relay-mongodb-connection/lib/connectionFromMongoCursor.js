'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Accepts a mongodb cursor and connection arguments, and returns a connection
 * object for use in GraphQL. It uses array offsets as pagination, so pagiantion
 * will work only if the data set is satic.
 */
exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(inMongoCursor) {
    var args = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var mapper = arguments[2];

    var mongodbCursor, count, _getOffsetsFromArgs, skip, limit, slice;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            mongodbCursor = inMongoCursor.clone();
            _context.next = 3;
            return mongodbCursor.count();

          case 3:
            count = _context.sent;
            _getOffsetsFromArgs = (0, _utils.getOffsetsFromArgs)(args, count);
            skip = _getOffsetsFromArgs.skip;
            limit = _getOffsetsFromArgs.limit;

            // If supplied slice is too large, trim it down before mapping over it.

            mongodbCursor.skip(skip);
            mongodbCursor.limit(limit);

            // Short circuit if limit is 0; in that case, mongodb doesn't limit at all

            if (!(limit === 0)) {
              _context.next = 13;
              break;
            }

            _context.t0 = [];
            _context.next = 16;
            break;

          case 13:
            _context.next = 15;
            return mongodbCursor.toArray();

          case 15:
            _context.t0 = _context.sent;

          case 16:
            slice = _context.t0;
            return _context.abrupt('return', (0, _utils.getConnectionFromSlice)(slice, mapper, args, count));

          case 18:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  function connectionFromMongoCursor(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  }

  return connectionFromMongoCursor;
}();