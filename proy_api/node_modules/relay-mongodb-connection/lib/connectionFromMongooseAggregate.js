'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function cloneAggregation(aggr) {
  /* eslint-disable no-underscore-dangle */
  var model = aggr._model.model(aggr._model.modelName);
  return model.aggregate(aggr._pipeline);
  /* eslint-enable no-underscore-dangle */
}

exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(aggr) {
    var args = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var mapper = arguments[2];

    var mongooseAggr, countAggr, countArr, count, _getOffsetsFromArgs, skip, limit, slice;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            mongooseAggr = cloneAggregation(aggr);
            countAggr = cloneAggregation(aggr);
            _context.next = 4;
            return countAggr.group({ _id: null, count: { $sum: 1 } });

          case 4:
            countArr = _context.sent;
            count = countArr.length > 0 && countArr[0].count ? countArr[0].count : 0;
            _getOffsetsFromArgs = (0, _utils.getOffsetsFromArgs)(args, count);
            skip = _getOffsetsFromArgs.skip;
            limit = _getOffsetsFromArgs.limit;

            /*
             * Mongoose Aggregate doesn't accept negative limit as well as Query
             */

            if (!(limit <= 0)) {
              _context.next = 11;
              break;
            }

            return _context.abrupt('return', (0, _utils.getConnectionFromSlice)([], mapper, args, count));

          case 11:

            mongooseAggr.skip(skip);
            mongooseAggr.limit(limit);

            _context.next = 15;
            return mongooseAggr.exec();

          case 15:
            slice = _context.sent;
            return _context.abrupt('return', (0, _utils.getConnectionFromSlice)(slice, mapper, args, count));

          case 17:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  function connectionFromMongooseAggregate(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  }

  return connectionFromMongooseAggregate;
}();